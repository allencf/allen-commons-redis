<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd"
	default-lazy-init="true">

	<description>Spring Configuration</description>
	
	<!-- 加载zk和zk之外的配置，优先级最高 -->
	<bean id="zkSourceConfigurer" class="com.ddkl.common.configuration.ZookeeperSourcesPlaceholderConfigurer">
		<property name="ignoreUnresolvablePlaceholders" value="true" />
		<property name="order" value="1"/>
		<property name="propertySources">
			<bean class="com.ddkl.common.configuration.ZookeeperSourceFactory" factory-method="create">
				<constructor-arg name="locations">
					<list>
						<value>classpath*:/application.properties</value>
						<!-- 开发环境配置 -->
						<value>file:c:/application.properties</value>
					 
						<value>file:/app/ddkl/config/application.properties</value>
					</list>
				</constructor-arg>
			</bean>
	    </property>
	</bean>
	
	<!-- Curator的FactoryBean，Spring启动时创建Curator实例。 -->
	<bean id="zookeeperFactoryBean" class="com.ddkl.common.configuration.listener.ZookeeperFactoryBean" lazy-init="false">
	    <property name="zkConnectionString" value="${zk.addr}"/>
	    <!-- 设置zookeeper的事件监听者，本例是一个logback日志级别znode监听器 -->
	    <property name="listeners">
	        <list>
	            <bean class="com.ddkl.common.configuration.listener.LogbackLevelListener">
	                <constructor-arg name="zkSourceConfigurer" ref="zkSourceConfigurer"/>
	                <constructor-arg name="loggerNames" value="com.ddkl"/>
	                <constructor-arg name="zkNodeName" value="ddkl.logbacklevel"/>
	            </bean>
	        </list>
	    </property>
	</bean>

		<!-- 日志设置 -->
	<bean class="com.ddkl.common.logback.spring.ApplicationContextHolder"/>
	<bean id="logstashAppender" class="com.ddkl.common.logback.appender.RedisAppender" init-method="start" destroy-method="stop">
        <property name="context" value="#{ T(org.slf4j.LoggerFactory).getILoggerFactory() }"/>
        <property name="source" value="${app.name}"/>
        <property name="sourcePath" value="${app.name}"/>
        <property name="type" value="logback"/>
        <property name="tags" value="${app.name}"/>
        <property name="host" value="${elk.redis.host}"/>
        <property name="port" value="${elk.redis.port}"/>
        <property name="key" value="logstash"/>
    </bean>
	
	<!-- 使用Annotation自动注册Bean，解决事物失效问题：在主容器中不扫描@Controller注解，在SpringMvc中只扫描@Controller注解。  -->
	<context:component-scan base-package="com.ddkl"><!-- base-package 如果多个，用“,”分隔 -->
	</context:component-scan>
	
	<bean class="com.ddkl.common.springutils.Springs" lazy-init="false"></bean>
	
	<bean id="exceptionHandler" class="com.ddkl.common.exception.SimpleExceptionHandler">
	</bean>
	<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">  
        <property name="basenames">  
            <list>  
				<value>com.ddkl.micromall.error</value>
				<value>com.ddkl.im.error</value>
            </list>  
        </property>  
    </bean>
	
	<!-- 七牛云存储 -->
	<bean id="cloudStorer" class="com.ddkl.commons.cloudstore.qiniu.QiniuCloudStorer">
	    <property name="accessKey" value="${qiniu.accessKey}"/>	
	    <property name="secretKey" value="${qiniu.secretKey}"/>	  
	    <property name="bucketMappingsUseJson" value="${qiniu.bucket.mappings}"/>
	    <property name="httpProxyHost" value="${http.proxy.host}"/> 
	    <property name="httpProxyPort" value="${http.proxy.port}"/>
	</bean>
	
	<bean class="com.ddkl.weixin.util.HttpProxyInit" lazy-init="false">
		<property name="host" value="${http.proxy.host}"/>
		<property name="port" value="${http.proxy.port}"/> 
	</bean>
	
	<!-- 微信回调过滤器代理ＢＥＡＮ -->
	<bean id="weixinFilterProxy" class="com.ddkl.micromall.weixin.filter.WeixinFilterProxy">
	
		<property name="customerService" ref="crmCustomerService" />
		<property name="publicNumberService" ref="wxPublicNumberService" />
		<property name="storeService" ref="storeService" />
		<property name="productService" ref="productService" />
		<property name="micromallService" ref="micromallService"/>
		<property name="wxScanLoggingService" ref="wxScanLoggingService" />
		<property name="custRelationsService" ref="custRelationsService" />
		<property name="wxSceneService" ref="wxSceneService" />
		<property name="userAccountService" ref="userAccountService" />
		<property name="wxUserLocationService" ref="wxUserLocationService"/>
		<property name="wxAPIUserService" ref="wxAPIUserService"/>
		<property name="groupBuyingService" ref="groupBuyingService"/>
		
		<property name="mallPageUrlPrefix" value="${mall.page.url.prefix}" />
		<property name="orgidParamName" value="${wx.orgid.paramName}" />
		<property name="openidParamName" value="${wx.openid.paramName}" />
		<property name="codeParamName" value="${wx.code.paramName}" />
		<property name="moduleParamName" value="${wx.module.paramName}" />
		<property name="wxMenuInvokeUrl" value="${wx.invokeme.url}" />
		<property name="errorUrl" value="${wx.error.url}"/>
		
		<property name="imSalerAppId" value="${ronglian.appId}"/>
		<property name="imComsumerAppId" value="${ronglian.comsumer.appId}"/>
		<property name="imComsumerAppToken" value="${ronglian.comsumer.appToken}"/>
		
		<property name="moduleUrlMappings">
			<map>
				<entry key="my" value="${wx.module.my.url}"/> 
				<entry key="mall" value="${wx.module.mall.url}"/> 
				<entry key="product" value="${wx.module.product.url}"/>  
				<entry key="details" value="${wx.module.details.url}"/>
				<entry key="redPacket" value="${wx.module.redPacket.url}"/>
				<!-- 团购页 -->
				<entry key="group" value="${wx.module.group.url}"/>
				<!-- APP下载页 -->
				<entry key="downLoadApp" value="${wx.module.download.app.url}"/>
				<!-- 消息列表页 -->
				<entry key="newsList" value="${wx.module.news.list.url}"/>
				<!-- 新团购页面 -->
				<entry key="newGroup" value="${wx.module.newGroup.url}"/>
			</map>
		</property>
	</bean>
	
	
	<!-- ================================================================================== -->
	<!-- MQ应用程序 事件消息中心 -->
	<!-- ================================================================================== -->
	<!-- MQ配置 -->
	<!-- 真正可以产生Connection的ConnectionFactory，由对应的 JMS服务厂商提供-->  
    <bean id="targetConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">  
        <property name="brokerURL" value="${mq.activemq.brokerURL}"/>  
    </bean>  
      
    <!-- Spring用于管理真正的ConnectionFactory的ConnectionFactory -->  
    <bean id="connectionFactory" class="org.springframework.jms.connection.SingleConnectionFactory">  
        <!-- 目标ConnectionFactory对应真实的可以产生JMS Connection的ConnectionFactory -->  
        <property name="targetConnectionFactory" ref="targetConnectionFactory"/>  
    </bean>  
    
    <bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
		<property name="connectionFactory" ref="connectionFactory" />
	</bean>
	
	<bean id="eventDispatcher" class="com.ddkl.common.event.base.ActiveMQEventDispatcher">
		<property name="jmsTemplate" ref="jmsTemplate"/>
	</bean>
	
</beans>